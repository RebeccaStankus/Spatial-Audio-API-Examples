<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, user-scalable=yes, initial-scale=1, maximum-scale=1">
        <meta name="mobile-web-app-capable" content="yes">
        <title>3D Dots</title>
        <link rel="stylesheet" href="/hackathon/css/dots3D.css"/>
    </head>

    <body>
        <div id="container">
            <div id="headerText">3D Dots</div>
            <h2 id="userDataTitle" >You are <%- providedUserID %></h2>
            <div id="dotsCanvasContainer">
                <canvas id="dotsCanvas"></canvas>
            </div>

            <div>
                <audio controls autoplay class="outputAudioEl"></audio>
            </div>
        
            <div class="userDataContainer__ours">
                <div class="userData">
                    <p class="ourPositionContainer"></p>
                    <p class="ourOrientationContainer"></p>
                </div>
            </div>
        
            <div class="buttonContainer">
                <div>
                    <button onclick="subtractX()">ü°Ä</button>
                    <button onclick="addX()">ü°Ç</button>
                </div>
                <div>
                    <button onclick="subtractY()">ü°Å</button>
                    <button onclick="addY()">ü°É</button>
                </div>
                <div>
                    <button onclick="subtractZ()">ü†Ω</button>
                    <button onclick="addZ()">ü†ø</button>
                </div>
<!--         
                <div>
                    <button onclick="subtractPitch()">pitch - 45¬∞</button>
                    <button onclick="addPitch()">pitch + 45¬∞</button>
                </div>
                <div>
                    <button onclick="subtractYaw()">yaw - 45¬∞</button>
                    <button onclick="addYaw()">yaw + 45¬∞</button>
                </div>
                <div>
                    <button onclick="subtractRoll()">roll - 45¬∞</button>
                    <button onclick="addRoll()">roll + 45¬∞</button>
                </div>
        
                <div>
                    <button onclick="resetPosition()">Reset Position</button>
                    <button onclick="resetOrientation()">Reset Orient.</button>
                </div> -->
            </div>
        
            <div class="userDataContainer userDataContainer__fromServer"></div>
        </div>

        <script src="https://hifi-spatial-audio-api.s3.amazonaws.com/releases/latest/HighFidelityAudio-latest.js"></script>
        <script>
            const WORLD_DIMENSION_M = 100; // World will be a cubic area where all sides are of this size
            const PROVIDED_USERNAME = '<%- providedUserID %>';
            let outputAudioEl = document.querySelector(`.outputAudioEl`);
            let userDataContainer__fromServer = document.querySelector(`.userDataContainer__fromServer`);

            let currentPosition = new HighFidelityAudio.Point3D({ "x": 0, "y": 0, "z": 0 });
            let currentOrientationEuler = new HighFidelityAudio.OrientationEuler3D({ "pitchDegrees": 0, "yawDegrees": 0, "rollDegrees": 0 });

            let ourHashedVisitID = document.querySelector(`.ourHashedVisitID`);
            let ourPositionContainer = document.querySelector(`.ourPositionContainer`);
            updatePositionContainer();
            let ourOrientationContainer = document.querySelector(`.ourOrientationContainer`);
            updateOrientationContainer();

            let hifiCommunicator = null;

            HighFidelityAudio.HiFiLogger.setHiFiLogLevel(HighFidelityAudio.HiFiLogLevel.Debug);

            async function getUserMediaWrapper() {
                let bestAudioConstraints = HighFidelityAudio.getBestAudioConstraints();
                console.log(`Using the following audio constraints for the user's audio input device:\n${JSON.stringify(bestAudioConstraints)}`);

                let inputAudioMediaStream;
                try {
                    inputAudioMediaStream = await navigator.mediaDevices.getUserMedia({ audio: bestAudioConstraints, video: false });
                } catch (e) {
                    console.error(`Call to \`getUserMedia()\` failed! Error:\n${e}`);
                    return;
                }
                await connectToHiFiAudio(inputAudioMediaStream);
            }

            function onConnectionStateChanged(newConnectionState) {
                console.log(`New High Fidelity connection state: ${newConnectionState}`);
                if (newConnectionState === HighFidelityAudio.HiFiConnectionStates.Disconnected || newConnectionState === HighFidelityAudio.HiFiConnectionStates.Failed) {
                    disconnectFromHiFiAudio();
                }
            }

            function updateAllUserDataDiv() {
                userDataContainer__fromServer.innerHTML = `<h2 class="userDataTitle">Peers</h2>`;

                for (let i = 0; i < currentPeers.length; i++) {
                    if (currentPeers[i].providedUserID === PROVIDED_USERNAME) {
                        continue;
                    }
                    let currentDiv = document.createElement('div');
                    currentDiv.classList.add("userData");
                    currentDiv.innerHTML += `<p style="color: ` + currentPeers[i].hexColor + `">${currentPeers[i].providedUserID ? currentPeers[i].providedUserID : "&#60;unknown&#62;"}</p>`;
                    userDataContainer__fromServer.appendChild(currentDiv);
                }
            }

            let currentPeers = [];
            function onNewUserDataReceived(incomingPeers) {
                let dataUpdated = false;

                // handle any removals first
                // for (let currentPeerItr = currentPeers.length - 1; currentPeerItr >= 0; currentPeerItr--) {
                //     // console.log(currentPeerItr, ") CURRENT PEER: ", currentPeers[currentPeerItr]);
                //     let remove = true;
                //     for (let incomingPeersItr = 0; incomingPeersItr < incomingPeers.length; incomingPeersItr++) {
                //         // console.log(incomingPeersItr, ") INCOMING PEER: ", incomingPeers[incomingPeersItr]);
                //         if (incomingPeers[incomingPeersItr].providedUserID === currentPeers[currentPeerItr].providedUserID) {
                //             remove = false;
                //             // console.log("FOUND IT");
                //         }
                //     }
                //     if (remove) {
                //         // console.log("REMOVING ", currentPeers[currentPeerItr].providedUserID);
                //         // console.log("INCOMING DATA WAS ", incomingPeers);
                //         currentPeers.splice(currentPeerItr, 1);
                //     }
                // }

                for (let incomingPeersItr = 0; incomingPeersItr < incomingPeers.length; incomingPeersItr++) {
                    let currentDataFromServer = incomingPeers[incomingPeersItr];

                    // We can't do anything with user data that doesn't contain a User ID or Hashed Visit ID.
                    if (!currentDataFromServer.providedUserID && !currentDataFromServer.hashedVisitID) {
                        continue;
                    }

                    let isNewUser = true;
                    for (let currentPeerItr = 0; currentPeerItr < currentPeers.length; currentPeerItr++) {
                        if ((currentDataFromServer.providedUserID && currentDataFromServer.providedUserID === currentPeers[currentPeerItr].providedUserID) ||
                            currentDataFromServer.hashedVisitID && currentDataFromServer.hashedVisitID === currentPeers[currentPeerItr].hashedVisitID) {
                            isNewUser = false;
                            dataUpdated = true;

                            if (currentDataFromServer.position) {
                                if (!currentPeers[currentPeerItr].position) {
                                    currentPeers[currentPeerItr].position = new HighFidelityAudio.Point3D();
                                }

                                if (typeof (currentDataFromServer.position.x) === "number") {
                                    currentPeers[currentPeerItr].position.x = currentDataFromServer.position.x;
                                }
                                if (typeof (currentDataFromServer.position.y) === "number") {
                                    currentPeers[currentPeerItr].position.y = currentDataFromServer.position.y;
                                }
                                if (typeof (currentDataFromServer.position.z) === "number") {
                                    currentPeers[currentPeerItr].position.z = currentDataFromServer.position.z;
                                }
                            }

                            if (currentDataFromServer.orientationEuler) {
                                if (!currentPeers[currentPeerItr].orientationEuler) {
                                    currentPeers[currentPeerItr].orientationEuler = new HighFidelityAudio.OrientationEuler3D();
                                }

                                if (typeof (currentDataFromServer.orientationEuler.pitchDegrees) === "number") {
                                    currentPeers[currentPeerItr].orientationEuler.pitchDegrees = currentDataFromServer.orientationEuler.pitchDegrees;
                                }
                                if (typeof (currentDataFromServer.orientationEuler.yawDegrees) === "number") {
                                    currentPeers[currentPeerItr].orientationEuler.yawDegrees = currentDataFromServer.orientationEuler.yawDegrees;
                                }
                                if (typeof (currentDataFromServer.orientationEuler.rollDegrees) === "number") {
                                    currentPeers[currentPeerItr].orientationEuler.rollDegrees = currentDataFromServer.orientationEuler.rollDegrees;
                                }
                            }

                            if (typeof (currentDataFromServer.volumeDecibels) === "number") {
                                currentPeers[currentPeerItr].volumeDecibels = currentDataFromServer.volumeDecibels;
                            }
                            break;
                        }
                    }

                    if (isNewUser) {
                        currentDataFromServer.hexColor = hexFromHash(currentDataFromServer.hashedVisitID);
                        currentPeers.push(currentDataFromServer);
                        dataUpdated = true;
                        if (currentDataFromServer.providedUserID === PROVIDED_USERNAME) {
                            document.getElementById("userDataTitle").style = `color: ` + currentDataFromServer.hexColor;
                        }
                    }
                }

                if (dataUpdated) {
                    updateAllUserDataDiv();
                }
            }

            async function connectToHiFiAudio(inputAudioMediaStream) {
                console.log(`Connecting to High Fidelity Audio API Servers...`);

                let initialHiFiAudioAPIData = new HighFidelityAudio.HiFiAudioAPIData({
                    position: currentPosition,
                    orientationEuler: currentOrientationEuler,
                });

                hifiCommunicator = new HighFidelityAudio.HiFiCommunicator({
                    initialHiFiAudioAPIData: initialHiFiAudioAPIData,
                    onConnectionStateChanged: onConnectionStateChanged
                });
                await hifiCommunicator.setInputAudioMediaStream(inputAudioMediaStream, false);

                const HIFI_AUDIO_JWT = '<%- hiFiJWT %>';
                let connectResponse;
                try {
                    connectResponse = await hifiCommunicator.connectToHiFiAudioAPIServer(HIFI_AUDIO_JWT);
                } catch (e) {
                    console.error(`Call to \`connectToHiFiAudioAPIServer()\` failed! Error:\n${JSON.stringify(e)}`);
                    return;
                }

                console.log(`Call to \`connectToHiFiAudioAPIServer()\` succeeded! Response:\n${JSON.stringify(connectResponse)}`);
                console.log(`Our \`hashedVisitID\` is:\n${connectResponse.audionetInitResponse.visit_id_hash}`);

                // This will get all Position and Orientation updates for all Users (including ourselves).
                let newUserDataSubscription = new HighFidelityAudio.UserDataSubscription({
                    "components": [
                        HighFidelityAudio.AvailableUserDataSubscriptionComponents.Position,
                        HighFidelityAudio.AvailableUserDataSubscriptionComponents.OrientationEuler,
                        HighFidelityAudio.AvailableUserDataSubscriptionComponents.VolumeDecibels
                    ],
                    "callback": (incomingPeers) => {
                        onNewUserDataReceived(incomingPeers);
                    }
                });
                hifiCommunicator.addUserDataSubscription(newUserDataSubscription);

                outputAudioEl.srcObject = hifiCommunicator.getOutputAudioMediaStream();
                // We must call `play()` here because certain browsers won't autoplay this stream as we expect.
                outputAudioEl.play();
            }

            async function disconnectFromHiFiAudio() {
                console.log(`Disconnecting from High Fidelity Audio API Servers...`);

                let disconnectStatus = await hifiCommunicator.disconnectFromHiFiAudioAPIServer();
                hifiCommunicator = null;
                console.log(disconnectStatus);
            }

            function updatePositionContainer() {
                ourPositionContainer.innerHTML = `Position: ${currentPosition ? JSON.stringify(currentPosition) : "&#60;unknown&#62;"}`;
            }

            function updateOrientationContainer() {
                ourOrientationContainer.innerHTML = `Orientation: ${currentOrientationEuler ? JSON.stringify(currentOrientationEuler) : "&#60;unknown&#62;"}`;
            }

            function updateAndTransmit() {
                updateOrientationContainer();
                updatePositionContainer();
                transmitHiFiAudioAPIDataToMixer();
            }

            function subtractX() {
                currentPosition.x = Math.round(Math.max(currentPosition.x - 1, -WORLD_DIMENSION_M / 2));
                updateAndTransmit();
            }
            function addX() {
                currentPosition.x = Math.round(Math.min(currentPosition.x + 1, WORLD_DIMENSION_M / 2));
                updateAndTransmit();
            }
            function subtractY() {
                currentPosition.y = Math.round(Math.max(currentPosition.y - 1, -WORLD_DIMENSION_M / 2));
                updateAndTransmit();
            }
            function addY() {
                currentPosition.y = Math.round(Math.min(currentPosition.y + 1, WORLD_DIMENSION_M / 2));
                updateAndTransmit();
            }
            function subtractZ() {
                currentPosition.z = Math.round(Math.max(currentPosition.z - 1, -WORLD_DIMENSION_M / 2));
                updateAndTransmit();
            }
            function addZ() {
                currentPosition.z = Math.round(Math.min(currentPosition.z + 1, WORLD_DIMENSION_M / 2));
                updateAndTransmit();
            }

            function subtractPitch() {
                currentOrientationEuler.pitchDegrees -= 45;
                updateAndTransmit();
            }
            function addPitch() {
                currentOrientationEuler.pitchDegrees += 45;
                updateAndTransmit();
            }
            function subtractYaw() {
                currentOrientationEuler.yawDegrees -= 45;
                updateAndTransmit();
            }
            function addYaw() {
                currentOrientationEuler.yawDegrees += 45;
                updateAndTransmit();
            }
            function subtractRoll() {
                currentOrientationEuler.rollDegrees -= 45;
                updateAndTransmit();
            }
            function addRoll() {
                currentOrientationEuler.rollDegrees += 45;
                updateAndTransmit();
            }

            function resetOrientation() {
                currentOrientationEuler.pitchDegrees = 0;
                currentOrientationEuler.yawDegrees = 0;
                currentOrientationEuler.rollDegrees = 0;

                updateOrientationContainer();

                if (!hifiCommunicator) {
                    return;
                }
                console.log(hifiCommunicator.updateUserDataAndTransmit({
                    orientationQuat: { "w": 1, "x": 0, "y": 0, "z": 0 }
                }));
            }

            function resetPosition() {
                currentPosition.x = 0;
                currentPosition.y = 0;
                currentPosition.z = 0;

                updatePositionContainer();

                transmitHiFiAudioAPIDataToMixer();
            }

            function transmitHiFiAudioAPIDataToMixer() {
                if (!hifiCommunicator) {
                    return;
                }

                console.log(hifiCommunicator.updateUserDataAndTransmit({
                    position: currentPosition,
                    orientationEuler: currentOrientationEuler,
                }));
            }
        
            const MAX_WORLD_AVATAR_SIZE_M = 3;
            const MIN_WORLD_AVATAR_SIZE_M = 0.01;
            let dotsCanvas = document.getElementById("dotsCanvas");
            let ctx = dotsCanvas.getContext('2d');
            let dotsCanvasContainerDimensionPx;
            let worldToCanvasRatio;
            let minCanvasAvatarSizePx;
            let maxCanvasAvatarSizePx;
            function resizeCanvas() {
                let dotsCanvasContainer = document.getElementById("dotsCanvasContainer");
                const MIN_CANVAS_CONTAINER_WIDTH = 250;
                const MAX_CANVAS_CONTAINER_WIDTH = 800;
                dotsCanvasContainerDimensionPx = Math.min(Math.max(dotsCanvasContainer.clientWidth, MIN_CANVAS_CONTAINER_WIDTH), MAX_CANVAS_CONTAINER_WIDTH);
                dotsCanvas.width = dotsCanvasContainerDimensionPx;
                dotsCanvas.height = dotsCanvasContainerDimensionPx;
                dotsCanvas.style.width = dotsCanvasContainerDimensionPx + "px";
                dotsCanvas.style.height = dotsCanvasContainerDimensionPx + "px";
                dotsCanvasContainer.style.height = dotsCanvasContainerDimensionPx + "px";

                minCanvasAvatarSizePx = (dotsCanvasContainerDimensionPx * MIN_WORLD_AVATAR_SIZE_M) / WORLD_DIMENSION_M;
                maxCanvasAvatarSizePx = (dotsCanvasContainerDimensionPx * MAX_WORLD_AVATAR_SIZE_M) / WORLD_DIMENSION_M;
                worldToCanvasRatio = WORLD_DIMENSION_M / dotsCanvasContainerDimensionPx;
                console.log("CANVAS SIZE: ", dotsCanvasContainerDimensionPx);
                console.log("MIN CANVAS AVATAR SIZE: ", minCanvasAvatarSizePx);
                console.log("MAX CANVAS AVATAR SIZE: ", maxCanvasAvatarSizePx);
            }
            resizeCanvas();

            function getCanvasCoords(worldPosition) {
                let canvasPosition = {
                    x: linearScale(worldPosition.x, -WORLD_DIMENSION_M / 2, WORLD_DIMENSION_M / 2, 0, dotsCanvasContainerDimensionPx),
                    y: linearScale(worldPosition.y, -WORLD_DIMENSION_M / 2, WORLD_DIMENSION_M / 2, 0, dotsCanvasContainerDimensionPx),
                    z: linearScale(worldPosition.z, -WORLD_DIMENSION_M / 2, WORLD_DIMENSION_M / 2, 0, dotsCanvasContainerDimensionPx)
                };

                return canvasPosition;
            }

            function clamp(value, min, max) {
                if (min > max) {
                    let temp = min;
                    min = max;
                    max = temp;
                }
                return Math.min(Math.max(value, min), max);
            }

            function linearScale(input, minInput, maxInput, minOutput, maxOutput) {
                input = clamp(input, minInput, maxInput);
                return minOutput + (maxOutput - minOutput) *
                    (input - minInput) / (maxInput - minInput);
            }
            
            function getNumericHashCode(str) {
                var hash = 0, i, chr;
                for (i = 0; i < str.length; i++) {
                    chr   = str.charCodeAt(i);
                    hash  = ((hash << 5) - hash) + chr;
                    hash |= 0; // Convert to 32bit integer
                }
                return hash;
            }

            function hexFromHash(hash) {
                let numericHash = getNumericHashCode(hash);
                let rgb = {
                    r: (numericHash & 0xFF0000) >> 16,
                    g: (numericHash & 0x00FF00) >> 8,
                    b: numericHash & 0x0000FF
                }

                let hexR = Number(rgb.r).toString(16);
                if (hexR.length < 2) {
                    hexR = "0" + hexR;
                }
                let hexG = Number(rgb.g).toString(16);
                if (hexG.length < 2) {
                    hexG = "0" + hexG;
                }
                let hexB = Number(rgb.b).toString(16);
                if (hexB.length < 2) {
                    hexB = "0" + hexB;
                }

                return `#${hexR}${hexG}${hexB}`;
            }

            function draw() {
                ctx.clearRect(0, 0, dotsCanvasContainerDimensionPx, dotsCanvasContainerDimensionPx);
                ctx.fillStyle = "#0F0F0F";
                ctx.fillRect(0, 0, dotsCanvasContainerDimensionPx, dotsCanvasContainerDimensionPx);
            
                for (let i = 0; i < currentPeers.length; i++) {
                    if (currentPeers[i].position) {
                        let peerCanvasPosition = getCanvasCoords(currentPeers[i].position);
                        let peerCanvasSize = linearScale(currentPeers[i].position.z, -WORLD_DIMENSION_M / 2, WORLD_DIMENSION_M / 2, minCanvasAvatarSizePx, maxCanvasAvatarSizePx);
                        
                        ctx.fillStyle = currentPeers[i].hexColor;
                        ctx.beginPath()
                        ctx.arc(peerCanvasPosition.x, peerCanvasPosition.y, peerCanvasSize / 2, 0, 2 * Math.PI);
                        ctx.fill();
                    }
                }
                requestAnimationFrame(draw);
            }
            window.onresize = resizeCanvas;
            getUserMediaWrapper();
            requestAnimationFrame(draw);
        </script>
    </body>
</html>